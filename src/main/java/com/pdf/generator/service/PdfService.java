package com.pdf.generator.service;

import java.io.ByteArrayOutputStream;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

//@Service
//public class PdfService
//{
//
//	private static Logger log = LoggerFactory.getLogger(PdfService.class);
//	private static String downloadPath = System.getProperty("user.home") + File.separator + "Downloads"
//			+ File.separator;
//	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
//	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
//	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
//	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
//
//	public File pdfGenerator(String first_name, String contactNum, String emailId) 
//	{
//		log.info("inside Service layer");
//		log.info("Filepath:\t" + downloadPath);
//		
//		String filePath = downloadPath + "user.pdf";
//		try
//		{
//			Document document = new Document();
//			PdfWriter.getInstance(document, new FileOutputStream(filePath));
//			document.open();
//			addTitleAndTable(document, first_name, emailId, contactNum);
//			document.close();
//
//			return new File(filePath);
//		} catch (Exception e)
//		{
//			e.printStackTrace();
//			return null;
//		}
//	}

//	private static void addTitleAndTable(Document document, String firstName, String emailId, String contactNum)
//			throws DocumentException
//	{
//		Paragraph preface = new Paragraph();
//		// We add one empty line
//		addEmptyLine(preface, 1);
//		// Lets write a big header
//		preface.add(new Paragraph("QUickHyre", catFont));
//
//		addEmptyLine(preface, 1);
//		// Will create: Report generated by: _name, _date
//		preface.add(new Paragraph("Report generated by: " + "QuickVerify Company: " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$
//																									// //$NON-NLS-3$
//				smallBold));
//
//		addEmptyLine(preface, 3);
//
//		document.add(preface);
//		document.add(Chunk.NEWLINE);
//		document.add(Chunk.NEWLINE);
//
//		PdfPTable table1 = new PdfPTable(2);
//		table1.setWidthPercentage(100);
//
//		PdfPCell c1 = new PdfPCell(new Phrase("User Details"));
//		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
//		c1.setColspan(2);
//		table1.addCell(c1);
//
//		table1.addCell("First Name:");
//		table1.addCell(firstName);
//		table1.addCell("Email Id:");
//		table1.addCell(emailId);
//		table1.addCell("Phone Num:");
//		table1.addCell(contactNum);
//
//		document.add(table1);
//
//		addEmptyLine(preface, 1);
//		addEmptyLine(preface, 1);
//		document.add(Chunk.NEWLINE);
//		document.add(Chunk.NEWLINE);
//		document.add(Chunk.NEWLINE);
//		document.add(Chunk.NEWLINE);
//
//		PdfPTable table2 = new PdfPTable(2);
//		table2.setWidthPercentage(100);
//
//		PdfPCell c2 = new PdfPCell(new Phrase("Payment Details"));
//		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
//		c2.setColspan(2);
//		table2.addCell(c2);
//
//		document.add(table2);
//
//	}
//
//	private static void addEmptyLine(Paragraph paragraph, int number)
//	{
//		for (int i = 0; i < number; i++)
//		{
//			paragraph.add(new Paragraph(" "));
//		}
//	}
//
//}

@Service
public class PdfService
{

	private static final Logger log = LoggerFactory.getLogger(PdfService.class);
//	private static final String downloadPath = System.getProperty("user.home") + File.separator + "Downloads"
//			+ File.separator;

	private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static final Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static final Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public byte[] pdfGenerator(String firstName, String contactNum, String emailId)
	{
		log.info("inside Service layer");
//		log.info("Filepath:\t" + downloadPath);

//		String filePath = downloadPath + "user.pdf";

		try (ByteArrayOutputStream baos = new ByteArrayOutputStream())
		{
			Document document = new Document();
			PdfWriter.getInstance(document, baos);
			document.open();
			addTitleAndTable(document, firstName, emailId, contactNum);
			document.close();
			return baos.toByteArray();
		} catch (Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	private static void addTitleAndTable(Document document, String firstName, String emailId, String contactNum)
			throws DocumentException
	{

		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("QuickHyre", catFont));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Report generated by: QuickVerify Company: " + new Date(), smallBold));
		addEmptyLine(preface, 3);

		document.add(preface);
		document.add(Chunk.NEWLINE);
		document.add(Chunk.NEWLINE);

		PdfPTable table1 = new PdfPTable(2);
		table1.setWidthPercentage(100);

		PdfPCell c1 = new PdfPCell(new Phrase("User Details"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		c1.setColspan(2);
		table1.addCell(c1);

		table1.addCell("First Name:");
		table1.addCell(firstName);
		table1.addCell("Email Id:");
		table1.addCell(emailId);
		table1.addCell("Phone Num:");
		table1.addCell(contactNum);

		document.add(table1);

		addEmptyLine(preface, 2);
		document.add(Chunk.NEWLINE);
		document.add(Chunk.NEWLINE);

		PdfPTable table2 = new PdfPTable(2);
		table2.setWidthPercentage(100);

		PdfPCell c2 = new PdfPCell(new Phrase("Payment Details"));
		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
		c2.setColspan(2);
		table2.addCell(c2);

		document.add(table2);
	}

	private static void addEmptyLine(Paragraph paragraph, int number)
	{
		for (int i = 0; i < number; i++)
		{
			paragraph.add(new Paragraph(" "));
		}
	}
}
